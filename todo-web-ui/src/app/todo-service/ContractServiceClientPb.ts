/**
 * @fileoverview gRPC-Web generated client stub for dev.fizlrock.waterwalk.grpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: contract.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as contract_pb from './contract_pb'; // proto import: "contract.proto"


export class WaterwalkServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorgetLocationList = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/getLocationList',
    grpcWeb.MethodType.SERVER_STREAMING,
    contract_pb.Void,
    contract_pb.LocationDto,
    (request: contract_pb.Void) => {
      return request.serializeBinary();
    },
    contract_pb.LocationDto.deserializeBinary
  );

  getLocationList(
    request: contract_pb.Void,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<contract_pb.LocationDto> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/dev.fizlrock.waterwalk.grpc.WaterwalkService/getLocationList',
      request,
      metadata || {},
      this.methodDescriptorgetLocationList);
  }

  methodDescriptorcreateLocation = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/createLocation',
    grpcWeb.MethodType.UNARY,
    contract_pb.CreateLocationRq,
    contract_pb.LocationDto,
    (request: contract_pb.CreateLocationRq) => {
      return request.serializeBinary();
    },
    contract_pb.LocationDto.deserializeBinary
  );

  createLocation(
    request: contract_pb.CreateLocationRq,
    metadata?: grpcWeb.Metadata | null): Promise<contract_pb.LocationDto>;

  createLocation(
    request: contract_pb.CreateLocationRq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contract_pb.LocationDto) => void): grpcWeb.ClientReadableStream<contract_pb.LocationDto>;

  createLocation(
    request: contract_pb.CreateLocationRq,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contract_pb.LocationDto) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dev.fizlrock.waterwalk.grpc.WaterwalkService/createLocation',
        request,
        metadata || {},
        this.methodDescriptorcreateLocation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dev.fizlrock.waterwalk.grpc.WaterwalkService/createLocation',
    request,
    metadata || {},
    this.methodDescriptorcreateLocation);
  }

  methodDescriptordeleteLocation = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/deleteLocation',
    grpcWeb.MethodType.UNARY,
    contract_pb.LocationId,
    contract_pb.Void,
    (request: contract_pb.LocationId) => {
      return request.serializeBinary();
    },
    contract_pb.Void.deserializeBinary
  );

  deleteLocation(
    request: contract_pb.LocationId,
    metadata?: grpcWeb.Metadata | null): Promise<contract_pb.Void>;

  deleteLocation(
    request: contract_pb.LocationId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void): grpcWeb.ClientReadableStream<contract_pb.Void>;

  deleteLocation(
    request: contract_pb.LocationId,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dev.fizlrock.waterwalk.grpc.WaterwalkService/deleteLocation',
        request,
        metadata || {},
        this.methodDescriptordeleteLocation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dev.fizlrock.waterwalk.grpc.WaterwalkService/deleteLocation',
    request,
    metadata || {},
    this.methodDescriptordeleteLocation);
  }

  methodDescriptorupdateLocation = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/updateLocation',
    grpcWeb.MethodType.UNARY,
    contract_pb.LocationDto,
    contract_pb.Void,
    (request: contract_pb.LocationDto) => {
      return request.serializeBinary();
    },
    contract_pb.Void.deserializeBinary
  );

  updateLocation(
    request: contract_pb.LocationDto,
    metadata?: grpcWeb.Metadata | null): Promise<contract_pb.Void>;

  updateLocation(
    request: contract_pb.LocationDto,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void): grpcWeb.ClientReadableStream<contract_pb.Void>;

  updateLocation(
    request: contract_pb.LocationDto,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dev.fizlrock.waterwalk.grpc.WaterwalkService/updateLocation',
        request,
        metadata || {},
        this.methodDescriptorupdateLocation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dev.fizlrock.waterwalk.grpc.WaterwalkService/updateLocation',
    request,
    metadata || {},
    this.methodDescriptorupdateLocation);
  }

  methodDescriptorgetRoutesInLocation = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/getRoutesInLocation',
    grpcWeb.MethodType.SERVER_STREAMING,
    contract_pb.LocationId,
    contract_pb.RouteDto,
    (request: contract_pb.LocationId) => {
      return request.serializeBinary();
    },
    contract_pb.RouteDto.deserializeBinary
  );

  getRoutesInLocation(
    request: contract_pb.LocationId,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<contract_pb.RouteDto> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/dev.fizlrock.waterwalk.grpc.WaterwalkService/getRoutesInLocation',
      request,
      metadata || {},
      this.methodDescriptorgetRoutesInLocation);
  }

  methodDescriptorcreateRoute = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/createRoute',
    grpcWeb.MethodType.UNARY,
    contract_pb.CreateRouteRq,
    contract_pb.RouteDto,
    (request: contract_pb.CreateRouteRq) => {
      return request.serializeBinary();
    },
    contract_pb.RouteDto.deserializeBinary
  );

  createRoute(
    request: contract_pb.CreateRouteRq,
    metadata?: grpcWeb.Metadata | null): Promise<contract_pb.RouteDto>;

  createRoute(
    request: contract_pb.CreateRouteRq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contract_pb.RouteDto) => void): grpcWeb.ClientReadableStream<contract_pb.RouteDto>;

  createRoute(
    request: contract_pb.CreateRouteRq,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contract_pb.RouteDto) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dev.fizlrock.waterwalk.grpc.WaterwalkService/createRoute',
        request,
        metadata || {},
        this.methodDescriptorcreateRoute,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dev.fizlrock.waterwalk.grpc.WaterwalkService/createRoute',
    request,
    metadata || {},
    this.methodDescriptorcreateRoute);
  }

  methodDescriptordeleteRoute = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/deleteRoute',
    grpcWeb.MethodType.UNARY,
    contract_pb.RouteId,
    contract_pb.Void,
    (request: contract_pb.RouteId) => {
      return request.serializeBinary();
    },
    contract_pb.Void.deserializeBinary
  );

  deleteRoute(
    request: contract_pb.RouteId,
    metadata?: grpcWeb.Metadata | null): Promise<contract_pb.Void>;

  deleteRoute(
    request: contract_pb.RouteId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void): grpcWeb.ClientReadableStream<contract_pb.Void>;

  deleteRoute(
    request: contract_pb.RouteId,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dev.fizlrock.waterwalk.grpc.WaterwalkService/deleteRoute',
        request,
        metadata || {},
        this.methodDescriptordeleteRoute,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dev.fizlrock.waterwalk.grpc.WaterwalkService/deleteRoute',
    request,
    metadata || {},
    this.methodDescriptordeleteRoute);
  }

  methodDescriptorupdateRoute = new grpcWeb.MethodDescriptor(
    '/dev.fizlrock.waterwalk.grpc.WaterwalkService/updateRoute',
    grpcWeb.MethodType.UNARY,
    contract_pb.RouteDto,
    contract_pb.Void,
    (request: contract_pb.RouteDto) => {
      return request.serializeBinary();
    },
    contract_pb.Void.deserializeBinary
  );

  updateRoute(
    request: contract_pb.RouteDto,
    metadata?: grpcWeb.Metadata | null): Promise<contract_pb.Void>;

  updateRoute(
    request: contract_pb.RouteDto,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void): grpcWeb.ClientReadableStream<contract_pb.Void>;

  updateRoute(
    request: contract_pb.RouteDto,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contract_pb.Void) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dev.fizlrock.waterwalk.grpc.WaterwalkService/updateRoute',
        request,
        metadata || {},
        this.methodDescriptorupdateRoute,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dev.fizlrock.waterwalk.grpc.WaterwalkService/updateRoute',
    request,
    metadata || {},
    this.methodDescriptorupdateRoute);
  }

}

